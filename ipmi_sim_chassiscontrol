#!/bin/sh

#
# An example script for handling external power control.

# It's parameters are:
#
#  ipmi_sim_chassiscontrol <device> get [parm [parm ...]]
#  ipmi_sim_chassiscontrol <device> set [parm val [parm val ...]]
#
# where <device> is the particular target to reset and parm is either
# "power", "reset", or "boot".
#
# The output of the "get" is "<parm>:<value>" for each listed parm,
# and only power is listed, you cannot fetch reset.
# The output of the "set" is empty on success.  Error output goes to
# standard out (so it can be captured in the simulator) and the program
# returns an error.
#
# The values for power and reset are either "1" or "0".  Note that
# reset does a pulse, it does not set the reset line level.
#
# The value for boot is either "none", "pxe" or "default".

readonly POWER_SYNTAX_ERR=1
readonly POWER_ON_ERR=2
readonly POWER_LOCK_ERR=3

prog=$0

dir_buf_name_gpio="/var/name_gpio"

timeout=0.5
timeout_hard=7

function button_press() {
    local gpio_name
    case $1 in
        power)
           gpio_name="PWRBTN_IMC"
           ;;
        reset)
           gpio_name="RSTBTN_IMC"
           ;;
        *)
           echo "'$1' is a wrong argument to the function 'button_press'"
           exit 1 
           ;;
    esac

    echo 1 > $dir_buf_name_gpio/$gpio_name/value
    sleep $2
    echo 0 > $dir_buf_name_gpio/$gpio_name/value

    exit 0
}

###
# Returned values:
#   1 - server is powered on
#   0 - server is powered off
###
function server_is_on() {
    if [ "$(cat $dir_buf_name_gpio/ACPI_ST0_TRANS/value)" -eq 0 ]; then
        echo 1
    else
        echo 0
    fi
}

op=$1
if [ "x$op" = "x" ]; then
    echo "No operation given"
    exit 1
fi
shift

do_get() {
    while [ "x$1" != "x" ]; do
  case $1 in
      power)
    if [ "x$(server_is_on)" == "x1" ]; then
      val=1
    else
      val=0
    fi
    ;;

      boot)
    val=default
    ;;

      # Note that reset has no get

      *)
    echo "Invalid parameter: $1"
    exit 1
    ;;
  esac

  echo "$1:$val"
  shift
    done
}

do_set() {
  parm="$1"
  shift
  #if [ "x$1" = "x" ]; then
  #    echo "No value present for parameter $parm"
  #    exit 1
  #fi
  val="$1"
  shift

  case $parm in
    power)
      if [ "x$val" = "x" ]; then
          echo "No value present for parameter $parm"
          exit $POWER_SYNTAX_ERR
      fi
      if [ "`cat $dir_buf_name_gpio/LOCK_IMC/value`" -eq 0 ]; then
        if [ $(server_is_on) -ne "$val" ]; then
          button_press "power" $timeout

          if [ "$val" -eq 1 ]; then
            if [ $(server_is_on) -eq 0 ]; then
              echo "$parm:not on server"
              exit $POWER_ON_ERR
            fi
          fi
        fi
      else
        echo "$parm:not on/off server"
        exit $POWER_LOCK_ERR
      fi
    ;;
    shutdown)
      if [ $(server_is_on) -eq 1 ]; then
        button_press "power" $timeout_hard
      fi
    ;;
    reset)
      if [ $(server_is_on) -eq 1 ]; then
        button_press "reset" $timeout
      else
        echo "$parm:not reset server"
        exit 2
      fi
    ;;

    boot)
    case $val in
        none)
      ;;
        pxe)
      ;;
        cdrom)
      ;;
        bios)
            ;;
        default)
                 ;;
        *)
      echo "Invalid boot value: $val"
      exit 1
      ;;
    esac
    ;;

            identify)
    interval=$val
    force=$1
    shift
    ;;

      *)
    echo "Invalid parameter: $parm"
    exit 1
    ;;
  esac
}

do_check() {
    # Check is not supported for chassis control
    exit 1
}

case $op in
    get)
  do_get $@
  ;;
    set)
  do_set $@
  ;;

    check)
  do_check $@
  ;;

*)
  echo "Unknown operation: $op"
  exit 1
esac
